<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on 于硕·Blog</title>
    <link>https://www.yushuo.me/tags/go/</link>
    <description>Recent content in go on 于硕·Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 25 Dec 2020 22:07:58 +0800</lastBuildDate><atom:link href="https://www.yushuo.me/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【初识Go】| Day12 单元测试</title>
      <link>https://www.yushuo.me/post/go_babystep12/</link>
      <pubDate>Fri, 25 Dec 2020 22:07:58 +0800</pubDate>
      
      <guid>https://www.yushuo.me/post/go_babystep12/</guid>
      <description>Maurice Wilkes，第一个存储程序计算机EDSAC的设计者，1949年他在实验室爬楼梯时有一个顿悟。在《计算机先驱回忆录》（Memoirs of a Computer Pioneer）里，他回忆到：“忽然间有一种醍醐灌顶的感觉，我整个后半生的美好时光都将在寻找程序BUG中度过了”。肯定从那之后的大部分正常的</description>
    </item>
    
    <item>
      <title>【初识Go】| Day11 反射机制</title>
      <link>https://www.yushuo.me/post/go_babystep11/</link>
      <pubDate>Thu, 24 Dec 2020 14:09:22 +0800</pubDate>
      
      <guid>https://www.yushuo.me/post/go_babystep11/</guid>
      <description>反射是什么 反射的概念是由Smith在1982年首次提出的，主要是指程序可以访问、检测和修改它本身状态或行为的一种能力。 有时候我们需要编写一个函数能够处理一类并不满足普通公共接口的类型的值，也可能是因为它们并没有确定的表示方式，或者是在我们设计该函数的时候这些类型可能还不存在。 Go 语</description>
    </item>
    
    <item>
      <title>【初识Go】| Day10 异常处理</title>
      <link>https://www.yushuo.me/post/go_babystep10/</link>
      <pubDate>Wed, 23 Dec 2020 19:09:21 +0800</pubDate>
      
      <guid>https://www.yushuo.me/post/go_babystep10/</guid>
      <description>error 针对这样的情况，Go语言中引入 error 接口类型作为错误处理的标准模式，如果函数要返回错误，则返回值类型列表中肯定包含 error。error 处理过程类似于C语言中的错误码，可逐层返回，直到被处理。 Go语言内置了一个简单的错误接口作为一种错误处理机制，接口定义如下： 1 2 3 type error interface { Error() string } 它</description>
    </item>
    
    <item>
      <title>【初识Go】| Day9 包管理</title>
      <link>https://www.yushuo.me/post/go_babystep9/</link>
      <pubDate>Tue, 22 Dec 2020 20:43:07 +0800</pubDate>
      
      <guid>https://www.yushuo.me/post/go_babystep9/</guid>
      <description>现在随便一个小程序的实现都可能包含超过10000个函数。然而作者一般只需要考虑其中很小的一部分和做很少的设计，因为绝大部分代码都是由他人编写的，它们通过类似包或模块的方式被重用。 Go语言有超过100个的标准包（译注：可以用go list std | wc -l命令查看标准包的具体数目），标准库为大多数</description>
    </item>
    
    <item>
      <title>【初识Go】| Day8 结构体、方法、接口</title>
      <link>https://www.yushuo.me/post/go_babystep8/</link>
      <pubDate>Mon, 21 Dec 2020 22:11:36 +0800</pubDate>
      
      <guid>https://www.yushuo.me/post/go_babystep8/</guid>
      <description>结构体 结构体是一种聚合的数据类型，是由零个或多个任意类型的值聚合成的实体。每个值称为结构体的成员。Go 语言中没有“类”的概念，也不支持像继承这种面向对象的概念。但是Go 语言的结构体与“类”都是复合结构体，而且Go 语言中结构体的组合方式比面向对象具有更高的扩展性和灵活性。比如用结构</description>
    </item>
    
    <item>
      <title>【初识Go】| Day7 函数</title>
      <link>https://www.yushuo.me/post/go_babystep7/</link>
      <pubDate>Sun, 20 Dec 2020 15:09:16 +0800</pubDate>
      
      <guid>https://www.yushuo.me/post/go_babystep7/</guid>
      <description>函数定义 函数声明包括函数名、形式参数列表、返回值列表（可省略）以及函数体。 1 2 3 func functionName([parameter list]) [returnTypes]{ //body } 函数由func关键字进行声明。 functionName：代表函数名。 parameter list：代表参数列表，函数的参数是可选的，可以包含参数也可以不包含参数。 returnTypes：返回值类型，返回值是</description>
    </item>
    
    <item>
      <title>【初识Go】| Day6 数组、切片</title>
      <link>https://www.yushuo.me/post/go_babystep6/</link>
      <pubDate>Sat, 19 Dec 2020 20:11:49 +0800</pubDate>
      
      <guid>https://www.yushuo.me/post/go_babystep6/</guid>
      <description>数组 数组的定义 数组是具有相同类型且长度固定的一组连续数据，一个数组可以由零个或多个元素组成。 因为数组的长度是固定的，因此在Go语言中很少直接使用数组。和数组对应的类型是Slice（切片），它是可以增长和收缩动态序列，slice功能也更灵活，但是要理解slice工作原理的话需要先理</description>
    </item>
    
    <item>
      <title>【初识Go】| Day5 字典、字符串</title>
      <link>https://www.yushuo.me/post/go_babystep5/</link>
      <pubDate>Fri, 18 Dec 2020 16:26:51 +0800</pubDate>
      
      <guid>https://www.yushuo.me/post/go_babystep5/</guid>
      <description>字典 字典定义 字典/哈希表是一种巧妙并且实用的数据字结构。它是一个无序的key/value对的集合，其中所有的key都是不同的，然后通过给定的key可以在常数时间复杂度内检索、更新或删除对应的value。 1 2 3 4 5 6 7 8 9 10 11 // 内置的make函数可以创建一个map： var m1 map[string]int m2 := make(map[int]interface{}, 100) ages</description>
    </item>
    
    <item>
      <title>【初识Go】| Day4 运算符、控制语句</title>
      <link>https://www.yushuo.me/post/go_babystep4/</link>
      <pubDate>Thu, 17 Dec 2020 16:26:51 +0800</pubDate>
      
      <guid>https://www.yushuo.me/post/go_babystep4/</guid>
      <description>运算符 运算符用于在程序运行时执行数学或逻辑运算。 Go 语言内置的运算符有： 算术运算符 关系运算符 逻辑运算符 位运算符 赋值运算符 其他运算符 算数运算符 运算符 描述 实例 + 相加 A + B 输出结果 30 - 相减 A - B 输出结果 -10 * 相乘 A * B 输出结果 200 / 相除 B / A 输出结果 2 % 求余 B % A 输出结果 0 ++ 自增 A++ 输出结果 11</description>
    </item>
    
    <item>
      <title>【初识Go】| Day3 变量、常量、枚举（iota）</title>
      <link>https://www.yushuo.me/post/go_babystep3/</link>
      <pubDate>Wed, 16 Dec 2020 19:53:29 +0800</pubDate>
      
      <guid>https://www.yushuo.me/post/go_babystep3/</guid>
      <description>变量 变量，计算机语言能存储计算结果或表示值的抽象概念。可以通过变量名访问，变量名由字母、数字、下划线组成，其中首个字符不能为数字 var 声明语句可以创建一个特定类型的变量，然后给变量附加一个名字，并且设置变量的初始值。变量声明的一般语法如下： 1 var 变量名字 类型 = 表达式 其中”类型”或“=表</description>
    </item>
    
    <item>
      <title>【初识Go】| Day2 数据类型、关键字、标识符</title>
      <link>https://www.yushuo.me/post/go_babystep2/</link>
      <pubDate>Tue, 15 Dec 2020 20:28:10 +0800</pubDate>
      
      <guid>https://www.yushuo.me/post/go_babystep2/</guid>
      <description>数据类型 Go语言中，数据类型用于声明函数和变量。 数据类型的出现是为了把数据分成所需内存大小不同的数据，编程的时候需要用大数据的时候才需要申请大内存，就可以充分利用内存。 Go语言的数据类型主要分为以下几种：布尔型、数字类型（包含整型、浮点型、复数）、字符串类型、派生类型。 布尔型 值为</description>
    </item>
    
    <item>
      <title>【初识Go】| Day1 Go语言特征&amp;开发环境配置</title>
      <link>https://www.yushuo.me/post/go_babystep1/</link>
      <pubDate>Mon, 14 Dec 2020 14:43:55 +0800</pubDate>
      
      <guid>https://www.yushuo.me/post/go_babystep1/</guid>
      <description>久闻Go语言大名，了解它是Google开发的一门静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。由于Go对于高并发的处理表现优异，很多互联网大厂纷纷投奔，比如听说字节跳动早期为了快速构建系统，很多后台应用使用Python语言，随着用户量和访问量的增加逐渐使用Go进行替代</description>
    </item>
    
  </channel>
</rss>
